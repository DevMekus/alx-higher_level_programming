============================
How to Use 4-print_square.py
============================

square-printing function ``print_square(size)``.

Usage
=====

Squares are printed using the ``#`` character.
::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(1)
    #

::

    >>> print_square(5)
    #####
    #####
    #####
    #####
    #####

::

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

the function prints nothing If ``size`` is zero 

::

    >>> print_square(0)

Invalid Sizes
=============

``size`` must be an integer.

::

    >>> print_square("hello")
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

::

    >>> print_square(12.4)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

::

    >>> print_square(None)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

If ``size`` is less than zero, a ValueError is raised.

::

    >>> print_square(-7)
    Traceback (most recent call last):
    ...
    ValueError: size must be >= 0

type-checking occurs before value-checking.

::

    >>> print_square(-7.5)
    Traceback (most recent call last):
    ...
    TypeError: size must be an integer

one argument must be provided.

::

    >>> print_square()
    Traceback (most recent call last):
    ...
    TypeError: print_square() missing 1 required positional argument: 'size'
